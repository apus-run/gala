// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apus-run/gala/components/mq (interfaces: Factory)
//
// Generated by this command:
//
//	mockgen -destination=mocks/factory.go -package=mocks . Factory
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	mq "github.com/apus-run/gala/components/mq"
	gomock "go.uber.org/mock/gomock"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
	isgomock struct{}
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// NewConsumer mocks base method.
func (m *MockFactory) NewConsumer(arg0 mq.ConsumerConfig) (mq.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConsumer", arg0)
	ret0, _ := ret[0].(mq.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewConsumer indicates an expected call of NewConsumer.
func (mr *MockFactoryMockRecorder) NewConsumer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConsumer", reflect.TypeOf((*MockFactory)(nil).NewConsumer), arg0)
}

// NewProducer mocks base method.
func (m *MockFactory) NewProducer(arg0 mq.ProducerConfig) (mq.Producer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewProducer", arg0)
	ret0, _ := ret[0].(mq.Producer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewProducer indicates an expected call of NewProducer.
func (mr *MockFactoryMockRecorder) NewProducer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewProducer", reflect.TypeOf((*MockFactory)(nil).NewProducer), arg0)
}
